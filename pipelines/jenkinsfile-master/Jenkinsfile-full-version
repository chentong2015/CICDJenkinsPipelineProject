#!/usr/bin/env groovy

// 一个完整的Jenkinsfile部署文件所包含的内容
// 自定义groovy的方法, 和Java的语法兼容，更侧重于描述形式的语言 !!

library 'lib-tests'
EXECUTION_LABEL = 'test-label'

pipeline {
    agent none

    parameters {
        booleanParam name: 'rebuildMvr', defaultValue: true
        booleanParam name: 'enableProfiling', defaultValue: false, description: 'my description'
    }

    triggers {
        pollSCM(ignorePostCommitHooks: true, scmpoll_spec: getTrigger())
    }

    options {
        timeout(time: 1, unit: 'DAYS')
        buildDiscarder logRotator(daysToKeepStr: '30')
        timestamps()
    }

    // 相关环境变量的配置
    environment {
        COMMON_DIR = ''
        ROOT_DIR = ''
        TEST_ROOT_DIR = "${ROOT_DIR}/src/test/perf"
        MVR_TEST_ROOT_DIR = ""
        BENCHMARK_UTILS_DIR = ''
        RESOURCE_DIR = "${ROOT_DIR}/src/test/resources"

        COMPOSE_FILE = '${ROOT_DIR}/src/docker/docker-compose.yml'
        COMPOSE_ID = generateComposeId()
        MVR_CONTAINER = containerName(COMPOSE_ID, 'mvr')

        COMPOSE_FILE_MSSQL = "${COMMON_DIR}/mssql/docker/docker-compose-mssql.yml"
    }

    // pipeline build的不同stage阶段(步骤)
    stages {
        // 配置一个完整的阶段：需要什么agent, when什么时候构建，构建的environment环境是什么
        //                 steps阶段，post和构建结束之后的阶段(ok, nok, cleanup)相关的操作
        stage('Launch my project building') {
            agent {
                node {
                    label EXECUTION_LABEL
                }
            }
            when {
                beforeAgent true
                expression { !params.enableProfiling }
            }
            environment {
                SETUPS_URL = nexusLatestSetupsUrl()
                TEST_NAME = "startup-parallel-${BUILD_ID}"
            }
            steps {
                script {
                    composeFiles = [COMPOSE_FILE, COMPOSE_FILE_MSSQL]
                }
                prepareDockerEnv(COMPOSE_ID, composeFiles, SETUPS_URL)
                sh 'docker exec ${CONTAINER} init/testing.sh'

                // 调用自定义的方法
                runTest('test_parallel_startup')
            }
            post {
                success {
                    utils.appendSummary(TEST_NAME, 'blue')
                }
                unsuccessful {
                    utils.appendSummary(TEST_NAME, 'red')
                }
                always {
                    collectAllContainerLogs(COMPOSE_ID, composeFiles)

                    // Logs, if available
                    catchError(buildResult: 'SUCCESS') {
                        zip archive: true, dir: "logs", glob: '', zipFile: "${TEST_NAME}-logs.zip"
                    }

                    // Output JSONs, if available
                    dir(TEST_ROOT_DIR) {
                        archiveArtifacts "parallel.json"
                    }
                }
                cleanup {
                    destroyDockerEnv(COMPOSE_ID, composeFiles)
                    cleanWs(disableDeferredWipeout: true, deleteDirs: true)
                }
            }
        }
    }
}

def runTest(test) {
    // Prepare the test
    sh '...'

    // Clear the cache
    utils = load 'utils.groovy'
    utils.clearDiskCaches(CONTAINER)

    // Run the test 部署后，通过docker执行指定的指令
    sh 'docker cp ...'
    sh 'docker exec ${CONTAINER} bash '
}

String getTrigger() {
    if (env.BRANCH_NAME == 'master' || env.BRANCH_NAME == 'v3.1') {
        if (env.TRIGGER_CRON) {
            echo 'Read env.TRIGGER_CRON=' + env.TRIGGER_CRON
            return env.TRIGGER_CRON
        }
        return '0 22 * * *'
    }
    return ''
}

// 加载指定模块下的Groovy文件
def loadUtils(testName) {
    utils = load 'library-groovy/utils.groovy'
    utils.appendSummary(testName, 'blue')
}
